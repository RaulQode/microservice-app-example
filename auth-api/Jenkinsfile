pipeline {
    agent any
    
    environment {
        IMAGE_NAME = "auth-api"
        DOCKER_REGISTRY_USER = "geoffrey0pv"
        SERVICE_DIR = "auth-api"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Procesando cambios en el directorio auth-api"
            }
        }
        
        stage('Build') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        sh 'ls -la'
                        
                        docker.image('golang:1.22-alpine').inside('-e GOCACHE=/tmp/go-cache -e GOMODCACHE=/tmp/go-mod') {
                            sh '''
                                go version
                                echo "GOCACHE: $GOCACHE"
                                echo "GOMODCACHE: $GOMODCACHE"
                                mkdir -p /tmp/go-cache /tmp/go-mod
                                go mod download
                                go mod tidy
                                CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o auth-api .
                                ls -la auth-api
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Unit Testing') {
            steps {
                dir("${SERVICE_DIR}") {
                    echo "Ejecutando pruebas unitarias para ${IMAGE_NAME}..."
                    // TODO: Implementar pruebas unitarias espec√≠ficas
                    echo "Pruebas unitarias completadas exitosamente"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        def shortCommit = env.GIT_COMMIT.substring(0,7)
                        def imageTag = "latest-${env.BRANCH_NAME}"
                        def fullImageName = "${DOCKER_REGISTRY_USER}/${IMAGE_NAME}"
                        
                        echo "Construyendo imagen: ${fullImageName}:${imageTag}"
                        
                        // Construir imagen directamente con el nombre completo
                        def customImage = docker.build("${fullImageName}:${shortCommit}", ".")
                        
                        // Tagear con la versi√≥n de la rama
                        customImage.tag(imageTag)
                        
                        // Guardar variables para el siguiente stage
                        env.FINAL_IMAGE_TAG = imageTag
                        env.SHORT_COMMIT = shortCommit
                        env.FULL_IMAGE_NAME = fullImageName
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        // Push ambos tags usando las variables de entorno
                        docker.image("${env.FULL_IMAGE_NAME}:${env.SHORT_COMMIT}").push()
                        docker.image("${env.FULL_IMAGE_NAME}:${env.FINAL_IMAGE_TAG}").push()
                        
                        echo "Imagen publicada: ${env.FULL_IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (env.BRANCH_NAME == 'master') {
                    echo "Disparando el pipeline de integraci√≥n..."
                    
                    try {
                        // Verificar si el job existe antes de intentar ejecutarlo
                        def integrationJobName = 'microservices-integration/master'
                        def alternativeJobName = 'microservice-app-example'
                        
                        // Intentar con el nombre principal primero
                        try {
                            build job: integrationJobName,
                                  parameters: [
                                      string(name: 'TRIGGERING_SERVICE', value: "${IMAGE_NAME}"),
                                      string(name: 'IMAGE_TAG', value: "${env.FINAL_IMAGE_TAG}")
                                  ],
                                  wait: false
                            echo "‚úÖ Pipeline de integraci√≥n disparado exitosamente: ${integrationJobName}"
                        } catch (Exception e1) {
                            echo "‚ö†Ô∏è No se encontr√≥ el job: ${integrationJobName}"
                            try {
                                // Intentar con nombre alternativo
                                build job: alternativeJobName,
                                      parameters: [
                                          string(name: 'TRIGGERING_SERVICE', value: "${IMAGE_NAME}"),
                                          string(name: 'IMAGE_TAG', value: "${env.FINAL_IMAGE_TAG}")
                                      ],
                                      wait: false
                                echo "‚úÖ Pipeline de integraci√≥n disparado exitosamente: ${alternativeJobName}"
                            } catch (Exception e2) {
                                echo "‚ö†Ô∏è No se encontr√≥ ning√∫n pipeline de integraci√≥n disponible"
                                echo "   Nombres intentados: ${integrationJobName}, ${alternativeJobName}"
                                echo "   Error 1: ${e1.getMessage()}"
                                echo "   Error 2: ${e2.getMessage()}"
                                echo "   üí° Verifica que el pipeline de integraci√≥n est√© configurado en Jenkins"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ùå Error general al intentar disparar integraci√≥n: ${e.getMessage()}"
                    }
                } else {
                    echo "‚ÑπÔ∏è Branch '${env.BRANCH_NAME}' - No se dispara integraci√≥n (solo master)"
                }
            }
        }
        always {
            cleanWs()
        }
        failure {
            echo "Build fall√≥ para ${IMAGE_NAME}"
        }
    }
}