pipeline {

    agent any

    environment {
        IMAGE_NAME = "auth-api"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Procesando cambios en el directorio auth-api"
            }
        }

        stage('Build & Test') {
            agent {
                docker { image 'golang:1.19' }
            }
            steps {
                dir('auth-api') {
                    sh 'go mod download'
                    sh 'go test ./...'
                    sh 'CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o auth-api .'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('auth-api') {
                    script {
                        def shortCommit = env.GIT_COMMIT.substring(0,7)
                        def imageTag = "latest-${env.BRANCH_NAME}"
                        def customImage = docker.build("${IMAGE_NAME}:${shortCommit}", ".")
                        customImage.tag("${env.DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${imageTag}")
                        env.FINAL_IMAGE_TAG = imageTag
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://registry.hub.docker.com", 'dockerhub-credentials') {
                        docker.image("${env.DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}").push()
                    }
                    echo "Imagen publicada: ${env.DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master') {
                    echo "Disparando el pipeline de integraci√≥n..."
                    build job: 'microservices-integration/master',
                          parameters: [
                              string(name: 'TRIGGERING_SERVICE', value: "${IMAGE_NAME}"),
                              string(name: 'IMAGE_TAG', value: "${env.FINAL_IMAGE_TAG}")
                          ]
                }
            }
        }
        always {
            cleanWs()
        }
    }
}