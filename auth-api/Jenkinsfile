pipeline {
    agent any
    
    environment {
        IMAGE_NAME = "auth-api"
        DOCKER_REGISTRY_USER = "geoffrey0pv"
        SERVICE_DIR = "auth-api"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Procesando cambios en el directorio auth-api"
            }
        }
        
        stage('Prepare Build') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        sh '''
                            echo "Preparando build para auth-api..."
                            ls -la
                            echo "Verificando archivos Go:"
                            ls -la *.go go.* 2>/dev/null || echo "Archivos Go listados"
                        '''
                    }
                }
            }
        }
        
        stage('Unit Testing') {
            steps {
                dir("${SERVICE_DIR}") {
                    echo "Ejecutando pruebas unitarias para ${IMAGE_NAME}..."
                    // TODO: Implementar pruebas unitarias específicas
                    echo "Pruebas unitarias completadas exitosamente"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        def shortCommit = env.GIT_COMMIT.substring(0,7)
                        def imageTag = "latest-${env.BRANCH_NAME}"
                        def fullImageName = "${DOCKER_REGISTRY_USER}/${IMAGE_NAME}"
                        
                        echo "Construyendo imagen: ${fullImageName}:${imageTag}"
                        
                        // Construir imagen directamente con el nombre completo
                        def customImage = docker.build("${fullImageName}:${shortCommit}", ".")
                        
                        // Tagear con la versión de la rama
                        customImage.tag(imageTag)
                        
                        // Guardar variables para el siguiente stage
                        env.FINAL_IMAGE_TAG = imageTag
                        env.SHORT_COMMIT = shortCommit
                        env.FULL_IMAGE_NAME = fullImageName
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        // Push ambos tags usando las variables de entorno
                        docker.image("${env.FULL_IMAGE_NAME}:${env.SHORT_COMMIT}").push()
                        docker.image("${env.FULL_IMAGE_NAME}:${env.FINAL_IMAGE_TAG}").push()
                        
                        echo "Imagen publicada: ${env.FULL_IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (env.BRANCH_NAME == 'master') {
                    echo "Build exitoso para ${IMAGE_NAME} - Imagen: ${env.FULL_IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"
                    echo "Disparando pipeline de integracion..."
                    
                    try {
                        // Nombres posibles del job de integración
                        def possibleJobNames = [
                            'microservices-integration/master',
                            'microservices-integration'
                        ]
                        
                        def jobTriggered = false
                        
                        for (jobName in possibleJobNames) {
                            try {
                                build job: jobName,
                                      parameters: [
                                          string(name: 'TRIGGERING_SERVICE', value: "${IMAGE_NAME}"),
                                          string(name: 'IMAGE_TAG', value: "${env.FINAL_IMAGE_TAG}")
                                      ],
                                      wait: false
                                echo "Pipeline de integracion disparado exitosamente: ${jobName}"
                                jobTriggered = true
                                break
                            } catch (Exception e) {
                                echo "No se encontro el job: ${jobName}"
                            }
                        }
                        
                        if (!jobTriggered) {
                            echo "No se pudo encontrar ningun pipeline de integracion"
                            echo "Jobs intentados: ${possibleJobNames.join(', ')}"
                            echo "Verifica que el pipeline de integracion este configurado en Jenkins"
                        }
                        
                    } catch (Exception e) {
                        echo "Error general al intentar disparar integracion: ${e.getMessage()}"
                    }
                } else {
                    echo "Branch '${env.BRANCH_NAME}' - No se dispara integracion (solo master)"
                }
            }
        }
        always {
            cleanWs()
        }
        failure {
            echo "Build fallo para ${IMAGE_NAME}"
        }
    }
}