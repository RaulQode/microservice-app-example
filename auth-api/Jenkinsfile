pipeline {
    agent any
    
    environment {
        IMAGE_NAME = "auth-api"
        DOCKER_REGISTRY_USER = "geoffrey0pv"
        SERVICE_DIR = "auth-api"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "Procesando cambios en el directorio auth-api"
            }
        }
        
        stage('Build & Test') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        sh 'ls -la'
                        
                        // Usar Go 1.22 con variables de entorno para permisos
                        docker.image('golang:1.22-alpine').inside('-e GOCACHE=/tmp/go-cache -e GOMODCACHE=/tmp/go-mod') {
                            sh '''
                                # Verificar versión y configuración
                                go version
                                echo "GOCACHE: $GOCACHE"
                                echo "GOMODCACHE: $GOMODCACHE"
                                
                                # Crear directorios de cache con permisos correctos
                                mkdir -p /tmp/go-cache /tmp/go-mod
                                
                                # Descargar dependencias
                                go mod download
                                go mod tidy
                                
                                # Tests (opcional, puede fallar si no hay tests)
                                go test ./... || echo "No hay tests definidos o tests fallaron"
                                
                                # Compilar
                                CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o auth-api .
                                
                                # Verificar binario
                                ls -la auth-api
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir("${SERVICE_DIR}") {
                    script {
                        def shortCommit = env.GIT_COMMIT.substring(0,7)
                        def imageTag = "latest-${env.BRANCH_NAME}"
                        
                        echo "Construyendo imagen: ${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${imageTag}"
                        
                        def customImage = docker.build("${fullImageName}:${shortCommit}", ".")
                        
                        customImage.tag(imageTag)
                        
                        env.FINAL_IMAGE_TAG = imageTag
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        docker.image("${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}").push()
                        docker.image("${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${env.GIT_COMMIT.substring(0,7)}").push()
                        
                        echo "Imagen publicada: ${DOCKER_REGISTRY_USER}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (env.BRANCH_NAME == 'master') {
                    echo "Disparando el pipeline de integración..."
                    
                    try {
                        build job: 'microservices-integration/master',
                              parameters: [
                                  string(name: 'TRIGGERING_SERVICE', value: "${IMAGE_NAME}"),
                                  string(name: 'IMAGE_TAG', value: "${env.FINAL_IMAGE_TAG}")
                              ],
                              wait: false
                    } catch (Exception e) {
                        echo "No se pudo disparar el pipeline de integración: ${e.getMessage()}"
                    }
                }
            }
        }
        always {
            cleanWs()
        }
        failure {
            echo "Build falló para ${IMAGE_NAME}"
        }
    }
}