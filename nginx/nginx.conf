events {
    worker_connections 1024;
}

http {
    # Configuración de logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Upstream para balanceeo de carga - Auth API
    upstream auth_api {
        # Método de balanceo: round-robin (por defecto)
        # least_conn; # Opcional: usar least-connections
        server auth-api:8000;
        # Para autoscaling dinámico (se pueden añadir más instancias):
        # server auth-api-2:8000;
        # server auth-api-3:8000;
    }

    # Upstream para balanceeo de carga - Users API
    upstream users_api {
        # Configuración para múltiples instancias
        server users-api:8083 weight=1 max_fails=3 fail_timeout=30s;
        # Instancias adicionales para scaling:
        # server users-api-2:8083 weight=1 max_fails=3 fail_timeout=30s;
        # server users-api-3:8083 weight=1 max_fails=3 fail_timeout=30s;
        
        # Health check básico
        keepalive 32;
    }

    # Upstream para balanceeo de carga - Todos API
    upstream todos_api {
        # Configuración para múltiples instancias
        server todos-api:8082 weight=1 max_fails=3 fail_timeout=30s;
        # Instancias adicionales para scaling:
        # server todos-api-2:8082 weight=1 max_fails=3 fail_timeout=30s;
        # server todos-api-3:8082 weight=1 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # Upstream para Zipkin
    upstream zipkin_service {
        server zipkin:9411;
    }

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /health {
            return 200 'API Gateway is healthy';
            add_header Content-Type text/plain;
        }

        # Proxy para Auth API (prefix match específico)
        location ^~ /api/auth/ {
            proxy_pass http://auth_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers para CORS si es necesario
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        }

        # Proxy para Users API (prefix match específico)
        location ^~ /api/users/ {
            proxy_pass http://users_api/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        }

        # Proxy para Todos API (prefix match específico)
        location ^~ /api/todos/ {
            proxy_pass http://todos_api/todos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        }        # Proxy para Zipkin (tracing) (prefix match específico)
        location ^~ /api/zipkin/ {
            proxy_pass http://zipkin_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Manejo de preflight CORS requests para todas las API routes
        location ~* ^/api/.* {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }
        }

        # Servir archivos estáticos del frontend (última prioridad)
        location / {
            proxy_pass http://frontend:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
